#!/bin/bash

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"
ZSH_CUSTOM="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"

echo "🚀 Setting up dotfiles..."

# Install Homebrew if not present
if ! command -v brew >/dev/null 2>&1; then
  echo "🍺 Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  
  # Add Homebrew to PATH for the rest of this script
  if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -f "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
fi

# Install Oh-My-Zsh if not present
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
  echo "📦 Installing Oh-My-Zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

# Install CLI tools and applications
echo "⚡ Installing CLI productivity tools and applications..."
brew install bat eza fd ripgrep lazygit gh tldr neovim git-delta starship fzf zoxide dust mise direnv carapace 2>/dev/null || echo "  Some tools may already be installed"

# Install broot
if ! command -v broot >/dev/null 2>&1; then
  echo "🌳 Installing broot..."
  brew install broot
  # Initialize broot config
  broot --install || echo "  Broot config initialization skipped"
fi

# Set up FZF key bindings and fuzzy completion
if command -v fzf >/dev/null 2>&1; then
  echo "🔍 Setting up FZF integration..."
  $(brew --prefix)/opt/fzf/install --key-bindings --completion --no-update-rc 2>/dev/null || echo "  FZF setup may already be complete"
fi

# Install external Oh-My-Zsh plugins
echo "🔌 Installing Oh-My-Zsh plugins..."

if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
  echo "  - Installing zsh-autosuggestions"
  git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"
fi

if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
  echo "  - Installing zsh-syntax-highlighting"
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"
fi

# Create symlinks
echo "🔗 Creating symlinks..."

symlink() {
  src=$DOTFILES_DIR/$1
  dst=$HOME/.$1

  if [[ -e "$dst" ]]; then
    rm -rf "$dst"
  fi

  echo "  SYMLINK: $src → $dst"
  ln -sf "$src" "$dst"
}

symlink gitconfig
symlink zshrc
symlink tmux.conf

# Set up config directory and symlinks
echo "🎨 Setting up configuration files..."
mkdir -p ~/.config/nvim

if [[ -f "$DOTFILES_DIR/nvim/init.lua" ]]; then
  ln -sf "$DOTFILES_DIR/nvim/init.lua" ~/.config/nvim/init.lua
  echo "  Neovim config symlinked"
else
  echo "  Neovim config will be created separately"
fi

if [[ -f "$DOTFILES_DIR/starship.toml" ]]; then
  ln -sf "$DOTFILES_DIR/starship.toml" ~/.config/starship.toml
  echo "  Starship config symlinked"
fi

if [[ -f "$DOTFILES_DIR/ghostty/config" ]]; then
  mkdir -p "$HOME/Library/Application Support/com.mitchellh.ghostty"
  ln -sf "$DOTFILES_DIR/ghostty/config" "$HOME/Library/Application Support/com.mitchellh.ghostty/config"
  echo "  Ghostty config symlinked"
fi

# Setup mise global config
mkdir -p ~/.config/mise
if [[ -f "$DOTFILES_DIR/mise/config.toml" ]]; then
  ln -sf "$DOTFILES_DIR/mise/config.toml" ~/.config/mise/config.toml
  echo "  mise config symlinked"
fi

# Install global toolchains via mise (non-fatal if network unavailable)
if command -v mise >/dev/null 2>&1; then
  echo "🧰 Installing runtimes via mise (from ~/.config/mise/config.toml)..."
  mise install -y || echo "  mise install skipped/failed (will work after network/keychain setup)"
  mise reshim || true
fi

echo "✅ Dotfiles setup complete!"
echo "💡 Restart your terminal or run 'source ~/.zshrc' to apply changes"
